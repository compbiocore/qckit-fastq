{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"qckitfastq: A comprehensive quality control R package for Next Generation Sequencing FASTQ data Overview This R package contains tools for comprehensive quality control of FASTQ format data. We hope to replicate existing tools for FASTQ quality control as well as advance FASTQ metrics where data is truncated for the analysis. We enable efficient processing of FASTQ format data by implementing efficient C++ functions using Rcpp . The metrics that qckitfastq provides are as following: 1. data dimension 2. per base sequence content 3. per base quality score statisitcs 4. per read GC content 5. per read mean quality score 6. overrepresented sequence 7. per base kmer count 8. overrepresented kmer The above metrices include both analysis results tables and visualizations of results. Getting started Prerequisites qckitfastq has dependencies on both CRAN packages and Bioconductor packages. Commands to install all prerequisites from R are given below: install.packages ( c ( 'magrittr' , 'ggplot2' , 'dplyr' , 'testthat' , 'data.table' , 'reshape2' , 'grDevices' , 'graphics' , 'stats' , 'utils' , 'Rcpp' , 'kableExtra' , 'rlang' , 'knitr' , 'rmarkdown' )) if ( ! requireNamespace ( \"BiocManager\" , quietly = TRUE )) install.packages ( \"BiocManager\" ) BiocManager :: install ( c ( \"RSeqAn\" , \"seqTools\" , \"zlibbioc\" ) Installing From Bioconductor qckitfastq release version is on Bioconductor. To install from, follow instructions on the package page . From Github repo This repository contains the development version. You will need devtools to install. devtools :: install_github ( \"compbiocore/qckitfastq\" , build_vignettes = TRUE ) library ( qckitfastq ) Usage The simplest way to run qckitfastq and its intended usage is by executing run_all , a single command that will produce a report of all of the included metrics in a user-provided directory with some default parameters and default filenames. These default parameters and filenames cannot be changed. An example using tempdir() and an example fq.gz file is given below: library ( qckitfastq ) infile <- system.file ( \"extdata\" , \"10^5_reads_test.fq.gz\" , package = \"qckitfastq\" ) testfolder <- tempdir () run_all ( infile , testfolder ) However, each metric can also be run separately for closer examination, parameter tuning, or if the user wishes to save reports with a different filename. In those cases, we recommend taking a look at the qckitfastq vignette to get started. The vignette can also be viewed in RStudio with the following commands: library ( qckitfastq ) browseVignettes ( \"qckitfastq\" ) Release history See NEWS for changes. Authors August Guang, creator and maintainer. Wenyue Xing, creator.","title":"Home"},{"location":"#qckitfastq-a-comprehensive-quality-control-r-package-for-next-generation-sequencing-fastq-data","text":"","title":"qckitfastq: A comprehensive quality control R package for Next Generation Sequencing FASTQ data"},{"location":"#overview","text":"This R package contains tools for comprehensive quality control of FASTQ format data. We hope to replicate existing tools for FASTQ quality control as well as advance FASTQ metrics where data is truncated for the analysis. We enable efficient processing of FASTQ format data by implementing efficient C++ functions using Rcpp . The metrics that qckitfastq provides are as following: 1. data dimension 2. per base sequence content 3. per base quality score statisitcs 4. per read GC content 5. per read mean quality score 6. overrepresented sequence 7. per base kmer count 8. overrepresented kmer The above metrices include both analysis results tables and visualizations of results.","title":"Overview"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#prerequisites","text":"qckitfastq has dependencies on both CRAN packages and Bioconductor packages. Commands to install all prerequisites from R are given below: install.packages ( c ( 'magrittr' , 'ggplot2' , 'dplyr' , 'testthat' , 'data.table' , 'reshape2' , 'grDevices' , 'graphics' , 'stats' , 'utils' , 'Rcpp' , 'kableExtra' , 'rlang' , 'knitr' , 'rmarkdown' )) if ( ! requireNamespace ( \"BiocManager\" , quietly = TRUE )) install.packages ( \"BiocManager\" ) BiocManager :: install ( c ( \"RSeqAn\" , \"seqTools\" , \"zlibbioc\" )","title":"Prerequisites"},{"location":"#installing","text":"","title":"Installing"},{"location":"#from-bioconductor","text":"qckitfastq release version is on Bioconductor. To install from, follow instructions on the package page .","title":"From Bioconductor"},{"location":"#from-github-repo","text":"This repository contains the development version. You will need devtools to install. devtools :: install_github ( \"compbiocore/qckitfastq\" , build_vignettes = TRUE ) library ( qckitfastq )","title":"From Github repo"},{"location":"#usage","text":"The simplest way to run qckitfastq and its intended usage is by executing run_all , a single command that will produce a report of all of the included metrics in a user-provided directory with some default parameters and default filenames. These default parameters and filenames cannot be changed. An example using tempdir() and an example fq.gz file is given below: library ( qckitfastq ) infile <- system.file ( \"extdata\" , \"10^5_reads_test.fq.gz\" , package = \"qckitfastq\" ) testfolder <- tempdir () run_all ( infile , testfolder ) However, each metric can also be run separately for closer examination, parameter tuning, or if the user wishes to save reports with a different filename. In those cases, we recommend taking a look at the qckitfastq vignette to get started. The vignette can also be viewed in RStudio with the following commands: library ( qckitfastq ) browseVignettes ( \"qckitfastq\" )","title":"Usage"},{"location":"#release-history","text":"See NEWS for changes.","title":"Release history"},{"location":"#authors","text":"August Guang, creator and maintainer. Wenyue Xing, creator.","title":"Authors"},{"location":"GC_content/","text":"GC_content : Calculates GC content percentage for each read in the dataset. Description Calculates GC content percentage for each read in the dataset. Usage GC_content ( infile , output_file = NA ) Arguments Argument Description infile the object that is the path to the FASTQ file output_file File to write results to. Default NA. Value Data frame with read ID and GC content of each read. Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") head(GC_content(infile)) ```","title":"`GC_content`: Calculates GC content percentage for each read in the dataset."},{"location":"GC_content/#gc_content-calculates-gc-content-percentage-for-each-read-in-the-dataset","text":"","title":"GC_content: Calculates GC content percentage for each read in the dataset."},{"location":"GC_content/#description","text":"Calculates GC content percentage for each read in the dataset.","title":"Description"},{"location":"GC_content/#usage","text":"GC_content ( infile , output_file = NA )","title":"Usage"},{"location":"GC_content/#arguments","text":"Argument Description infile the object that is the path to the FASTQ file output_file File to write results to. Default NA.","title":"Arguments"},{"location":"GC_content/#value","text":"Data frame with read ID and GC content of each read.","title":"Value"},{"location":"GC_content/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") head(GC_content(infile)) ```","title":"Examples"},{"location":"adapter_content/","text":"adapter_content : Creates a sorted from most frequent to least frequent abundance table of adapters that are found to be present in the reads at greater than 0.1% of the reads. If output_file is selected then will save the entire set of adapters and counts. Only available for macOS/Linux due to dependency on C++14. Description Creates a sorted from most frequent to least frequent abundance table of adapters that are found to be present in the reads at greater than 0.1% of the reads. If output_file is selected then will save the entire set of adapters and counts. Only available for macOS/Linux due to dependency on C++14. Usage adapter_content ( infile , adapter_file = system.file ( \"extdata\" , \"adapters.txt\" , package = \"qckitfastq\" ), output_file = NA ) Arguments Argument Description infile the path to a gzipped FASTQ file adapter_file Path to adapters.txt file. Default from package. output_file File to save data frame to. Default NA. Value Sorted table of adapters and counts. Examples r if(.Platform$OS.type != \"windows\") { infile <- system.file(\"extdata\",\"test.fq.gz\", package = \"qckitfastq\") adapter_content(infile)[1:5] }","title":"`adapter_content`: Creates a sorted from most frequent to least frequent abundance table"},{"location":"adapter_content/#adapter_content-creates-a-sorted-from-most-frequent-to-least-frequent-abundance-table","text":"of adapters that are found to be present in the reads at greater than 0.1% of the reads. If output_file is selected then will save the entire set of adapters and counts. Only available for macOS/Linux due to dependency on C++14.","title":"adapter_content: Creates a sorted from most frequent to least frequent abundance table"},{"location":"adapter_content/#description","text":"Creates a sorted from most frequent to least frequent abundance table of adapters that are found to be present in the reads at greater than 0.1% of the reads. If output_file is selected then will save the entire set of adapters and counts. Only available for macOS/Linux due to dependency on C++14.","title":"Description"},{"location":"adapter_content/#usage","text":"adapter_content ( infile , adapter_file = system.file ( \"extdata\" , \"adapters.txt\" , package = \"qckitfastq\" ), output_file = NA )","title":"Usage"},{"location":"adapter_content/#arguments","text":"Argument Description infile the path to a gzipped FASTQ file adapter_file Path to adapters.txt file. Default from package. output_file File to save data frame to. Default NA.","title":"Arguments"},{"location":"adapter_content/#value","text":"Sorted table of adapters and counts.","title":"Value"},{"location":"adapter_content/#examples","text":"r if(.Platform$OS.type != \"windows\") { infile <- system.file(\"extdata\",\"test.fq.gz\", package = \"qckitfastq\") adapter_content(infile)[1:5] }","title":"Examples"},{"location":"calc_adapter_content/","text":"calc_adapter_content : Compute adapter content in reads. This function is only available for macOS/Linux. Description Compute adapter content in reads. This function is only available for macOS/Linux. Usage calc_adapter_content ( infile , adapters ) Arguments Argument Description infile filepath to fastq sequence adapters filepath to adapters Value map object with adapter names as the key and the number of times the adapters appears in the reads as the value Examples r if(.Platform$OS.type != \"windows\") { adapter_file <- system.file(\"extdata\", \"adapters.txt\", package = \"qckitfastq\") infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") content <- calc_adapter_content(infile, adapter_file) }","title":"`calc_adapter_content`: Compute adapter content in reads. This function is only available for macOS/Linux."},{"location":"calc_adapter_content/#calc_adapter_content-compute-adapter-content-in-reads-this-function-is-only-available-for-macoslinux","text":"","title":"calc_adapter_content: Compute adapter content in reads. This function is only available for macOS/Linux."},{"location":"calc_adapter_content/#description","text":"Compute adapter content in reads. This function is only available for macOS/Linux.","title":"Description"},{"location":"calc_adapter_content/#usage","text":"calc_adapter_content ( infile , adapters )","title":"Usage"},{"location":"calc_adapter_content/#arguments","text":"Argument Description infile filepath to fastq sequence adapters filepath to adapters","title":"Arguments"},{"location":"calc_adapter_content/#value","text":"map object with adapter names as the key and the number of times the adapters appears in the reads as the value","title":"Value"},{"location":"calc_adapter_content/#examples","text":"r if(.Platform$OS.type != \"windows\") { adapter_file <- system.file(\"extdata\", \"adapters.txt\", package = \"qckitfastq\") infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") content <- calc_adapter_content(infile, adapter_file) }","title":"Examples"},{"location":"calc_format_score/","text":"calc_format_score : Calculate score based on Illumina format Description Calculate score based on Illumina format Usage calc_format_score ( score , score_format ) Arguments Argument Description score An ascii quality score from the fastq score_format The illumina format Value a string as with the best guess as to the illumina format Examples r calc_format_score(\"A\",\"Sanger\")","title":"`calc_format_score`: Calculate score based on Illumina format"},{"location":"calc_format_score/#calc_format_score-calculate-score-based-on-illumina-format","text":"","title":"calc_format_score: Calculate score based on Illumina format"},{"location":"calc_format_score/#description","text":"Calculate score based on Illumina format","title":"Description"},{"location":"calc_format_score/#usage","text":"calc_format_score ( score , score_format )","title":"Usage"},{"location":"calc_format_score/#arguments","text":"Argument Description score An ascii quality score from the fastq score_format The illumina format","title":"Arguments"},{"location":"calc_format_score/#value","text":"a string as with the best guess as to the illumina format","title":"Value"},{"location":"calc_format_score/#examples","text":"r calc_format_score(\"A\",\"Sanger\")","title":"Examples"},{"location":"calc_over_rep_seq/","text":"calc_over_rep_seq : Calculate sequece counts for each unique sequence and create a table with unique sequences and corresponding counts Description Calculate sequece counts for each unique sequence and create a table with unique sequences and corresponding counts Usage calc_over_rep_seq ( infile , min_size = 5L , buffer_size = 1000000L ) Arguments Argument Description infile A string giving the path for the fastqfile min_size An int for thhresholding over representation buffer_size An int for the number of lines to keep in memory Value calculate overrepresented sequence count Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") calc_over_rep_seq(infile)[seq_len(5)]","title":"`calc_over_rep_seq`: Calculate sequece counts for each unique sequence and create a table with unique sequences"},{"location":"calc_over_rep_seq/#calc_over_rep_seq-calculate-sequece-counts-for-each-unique-sequence-and-create-a-table-with-unique-sequences","text":"and corresponding counts","title":"calc_over_rep_seq: Calculate sequece counts for each unique sequence and create a table with unique sequences"},{"location":"calc_over_rep_seq/#description","text":"Calculate sequece counts for each unique sequence and create a table with unique sequences and corresponding counts","title":"Description"},{"location":"calc_over_rep_seq/#usage","text":"calc_over_rep_seq ( infile , min_size = 5L , buffer_size = 1000000L )","title":"Usage"},{"location":"calc_over_rep_seq/#arguments","text":"Argument Description infile A string giving the path for the fastqfile min_size An int for thhresholding over representation buffer_size An int for the number of lines to keep in memory","title":"Arguments"},{"location":"calc_over_rep_seq/#value","text":"calculate overrepresented sequence count","title":"Value"},{"location":"calc_over_rep_seq/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") calc_over_rep_seq(infile)[seq_len(5)]","title":"Examples"},{"location":"dimensions/","text":"dimensions : Extract the number of columns and rows for a FASTQ file using seqTools. Description Extract the number of columns and rows for a FASTQ file using seqTools. Usage dimensions ( fseq , sel ) Arguments Argument Description fseq an object that is the read result of the seq.read function sel 'reads' for #reads/rows, 'positions' for #positions/columns Value a numeric value of the number of reads or the number of positions Examples ```r infile <- system.file(\"extdata\",\"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) dimensions(fseq,\"reads\") ```","title":"`dimensions`: Extract the number of columns and rows for a FASTQ file using seqTools."},{"location":"dimensions/#dimensions-extract-the-number-of-columns-and-rows-for-a-fastq-file-using-seqtools","text":"","title":"dimensions: Extract the number of columns and rows for a FASTQ file using seqTools."},{"location":"dimensions/#description","text":"Extract the number of columns and rows for a FASTQ file using seqTools.","title":"Description"},{"location":"dimensions/#usage","text":"dimensions ( fseq , sel )","title":"Usage"},{"location":"dimensions/#arguments","text":"Argument Description fseq an object that is the read result of the seq.read function sel 'reads' for #reads/rows, 'positions' for #positions/columns","title":"Arguments"},{"location":"dimensions/#value","text":"a numeric value of the number of reads or the number of positions","title":"Value"},{"location":"dimensions/#examples","text":"```r infile <- system.file(\"extdata\",\"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) dimensions(fseq,\"reads\") ```","title":"Examples"},{"location":"find_format/","text":"find_format : Gets quality score encoding format from the FASTQ file. Return possibilities are Sanger(/Illumina1.8), Solexa(/Illumina1.0), Illumina1.3, and Illumina1.5. This encoding is heuristic based and may not be 100 % accurate since there is overlap in the encodings used, so it is best if you already know the format. Description Gets quality score encoding format from the FASTQ file. Return possibilities are Sanger(/Illumina1.8), Solexa(/Illumina1.0), Illumina1.3, and Illumina1.5. This encoding is heuristic based and may not be 100 % accurate since there is overlap in the encodings used, so it is best if you already know the format. Usage find_format ( infile , reads_used ) Arguments Argument Description infile A string giving the path for the fastq file reads_used int, the number of reads to use to determine the encoding format. Value A string denoting the read format. Possibilities are Sanger, Solexa, Illumina1.3, and Illumina1.5. Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") find_format(infile,100)","title":"`find_format`: Gets quality score encoding format from the FASTQ file. Return possibilities are Sanger(/Illumina1.8),"},{"location":"find_format/#find_format-gets-quality-score-encoding-format-from-the-fastq-file-return-possibilities-are-sangerillumina18","text":"Solexa(/Illumina1.0), Illumina1.3, and Illumina1.5. This encoding is heuristic based and may not be 100 % accurate since there is overlap in the encodings used, so it is best if you already know the format.","title":"find_format: Gets quality score encoding format from the FASTQ file. Return possibilities are Sanger(/Illumina1.8),"},{"location":"find_format/#description","text":"Gets quality score encoding format from the FASTQ file. Return possibilities are Sanger(/Illumina1.8), Solexa(/Illumina1.0), Illumina1.3, and Illumina1.5. This encoding is heuristic based and may not be 100 % accurate since there is overlap in the encodings used, so it is best if you already know the format.","title":"Description"},{"location":"find_format/#usage","text":"find_format ( infile , reads_used )","title":"Usage"},{"location":"find_format/#arguments","text":"Argument Description infile A string giving the path for the fastq file reads_used int, the number of reads to use to determine the encoding format.","title":"Arguments"},{"location":"find_format/#value","text":"A string denoting the read format. Possibilities are Sanger, Solexa, Illumina1.3, and Illumina1.5.","title":"Value"},{"location":"find_format/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") find_format(infile,100)","title":"Examples"},{"location":"gc_per_read/","text":"gc_per_read : Calculate GC nucleotide sequence content per read of the FASTQ gzipped file Description Calculate GC nucleotide sequence content per read of the FASTQ gzipped file Usage gc_per_read ( infile ) Arguments Argument Description infile A string giving the path for the fastqfile Value GC content perncentage per read Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") gc_per_read(infile)[1:10]","title":"`gc_per_read`: Calculate GC nucleotide sequence content per read of the FASTQ gzipped file"},{"location":"gc_per_read/#gc_per_read-calculate-gc-nucleotide-sequence-content-per-read-of-the-fastq-gzipped-file","text":"","title":"gc_per_read: Calculate GC nucleotide sequence content per read of the FASTQ gzipped file"},{"location":"gc_per_read/#description","text":"Calculate GC nucleotide sequence content per read of the FASTQ gzipped file","title":"Description"},{"location":"gc_per_read/#usage","text":"gc_per_read ( infile )","title":"Usage"},{"location":"gc_per_read/#arguments","text":"Argument Description infile A string giving the path for the fastqfile","title":"Arguments"},{"location":"gc_per_read/#value","text":"GC content perncentage per read","title":"Value"},{"location":"gc_per_read/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") gc_per_read(infile)[1:10]","title":"Examples"},{"location":"kmer_count/","text":"kmer_count : Return kmer count per sequence for the length of kmer desired Description Return kmer count per sequence for the length of kmer desired Usage kmer_count ( infile , k , output_file = NA ) Arguments Argument Description infile the object that is the path to gzippped FASTQ file k the length of kmer output_file File to save plot to. Default NA. Value kmers counts per sequence Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") km<-kmer_count(infile,k=4) km[1:20,1:10] ```","title":"`kmer_count`: Return kmer count per sequence for the length of kmer desired"},{"location":"kmer_count/#kmer_count-return-kmer-count-per-sequence-for-the-length-of-kmer-desired","text":"","title":"kmer_count: Return kmer count per sequence for the length of kmer desired"},{"location":"kmer_count/#description","text":"Return kmer count per sequence for the length of kmer desired","title":"Description"},{"location":"kmer_count/#usage","text":"kmer_count ( infile , k , output_file = NA )","title":"Usage"},{"location":"kmer_count/#arguments","text":"Argument Description infile the object that is the path to gzippped FASTQ file k the length of kmer output_file File to save plot to. Default NA.","title":"Arguments"},{"location":"kmer_count/#value","text":"kmers counts per sequence","title":"Value"},{"location":"kmer_count/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") km<-kmer_count(infile,k=4) km[1:20,1:10] ```","title":"Examples"},{"location":"overrep_kmer/","text":"overrep_kmer : Generate overrepresented kmers of length k based on their observed to expected ratio at each position across all sequences in the dataset. The expected proportion of a length k kmer assumes site independence and is computed as the sum of the count of each base pair in the kmer times the probability of observing that base pair in the data set, i.e. P(A)count_in_kmer(A)+P(C)count_in_kmer(C)+... The observed to expected ratio is computed as log2(obs/exp). Those with obsexp_ratio > 2 are considered to be overrepresented and appear in the returned data frame along with their position in the sequence. Description Generate overrepresented kmers of length k based on their observed to expected ratio at each position across all sequences in the dataset. The expected proportion of a length k kmer assumes site independence and is computed as the sum of the count of each base pair in the kmer times the probability of observing that base pair in the data set, i.e. P(A)count_in_kmer(A)+P(C)count_in_kmer(C)+... The observed to expected ratio is computed as log2(obs/exp). Those with obsexp_ratio > 2 are considered to be overrepresented and appear in the returned data frame along with their position in the sequence. Usage overrep_kmer ( infile , k , output_file = NA ) Arguments Argument Description infile path to gzipped FASTQ file k the kmer length output_file File to save plot to. Default NA. Value Data frame with columns: Position (in read), Obsexp_ratio, & Kmer Examples ```r infile <-system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") overrep_kmer(infile,k=4) ```","title":"`overrep_kmer`: Generate overrepresented kmers of length k based on their"},{"location":"overrep_kmer/#overrep_kmer-generate-overrepresented-kmers-of-length-k-based-on-their","text":"observed to expected ratio at each position across all sequences in the dataset. The expected proportion of a length k kmer assumes site independence and is computed as the sum of the count of each base pair in the kmer times the probability of observing that base pair in the data set, i.e. P(A)count_in_kmer(A)+P(C)count_in_kmer(C)+... The observed to expected ratio is computed as log2(obs/exp). Those with obsexp_ratio > 2 are considered to be overrepresented and appear in the returned data frame along with their position in the sequence.","title":"overrep_kmer: Generate overrepresented kmers of length k based on their"},{"location":"overrep_kmer/#description","text":"Generate overrepresented kmers of length k based on their observed to expected ratio at each position across all sequences in the dataset. The expected proportion of a length k kmer assumes site independence and is computed as the sum of the count of each base pair in the kmer times the probability of observing that base pair in the data set, i.e. P(A)count_in_kmer(A)+P(C)count_in_kmer(C)+... The observed to expected ratio is computed as log2(obs/exp). Those with obsexp_ratio > 2 are considered to be overrepresented and appear in the returned data frame along with their position in the sequence.","title":"Description"},{"location":"overrep_kmer/#usage","text":"overrep_kmer ( infile , k , output_file = NA )","title":"Usage"},{"location":"overrep_kmer/#arguments","text":"Argument Description infile path to gzipped FASTQ file k the kmer length output_file File to save plot to. Default NA.","title":"Arguments"},{"location":"overrep_kmer/#value","text":"Data frame with columns: Position (in read), Obsexp_ratio, & Kmer","title":"Value"},{"location":"overrep_kmer/#examples","text":"```r infile <-system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") overrep_kmer(infile,k=4) ```","title":"Examples"},{"location":"overrep_reads/","text":"overrep_reads : Sort all sequences per read by count. Description Sort all sequences per read by count. Usage overrep_reads ( infile , output_file = NA ) Arguments Argument Description infile Path to gzippped FASTQ file. output_file File to save data frame to. Default NA. Value Table of sequences sorted by count. Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") overrep_reads(infile)[1:5,]","title":"`overrep_reads`: Sort all sequences per read by count."},{"location":"overrep_reads/#overrep_reads-sort-all-sequences-per-read-by-count","text":"","title":"overrep_reads: Sort all sequences per read by count."},{"location":"overrep_reads/#description","text":"Sort all sequences per read by count.","title":"Description"},{"location":"overrep_reads/#usage","text":"overrep_reads ( infile , output_file = NA )","title":"Usage"},{"location":"overrep_reads/#arguments","text":"Argument Description infile Path to gzippped FASTQ file. output_file File to save data frame to. Default NA.","title":"Arguments"},{"location":"overrep_reads/#value","text":"Table of sequences sorted by count.","title":"Value"},{"location":"overrep_reads/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") overrep_reads(infile)[1:5,]","title":"Examples"},{"location":"per_base_quality/","text":"per_base_quality : Compute the mean, median, and percentiles of quality score per base. This is returned as a data frame. Description Compute the mean, median, and percentiles of quality score per base. This is returned as a data frame. Usage per_base_quality ( infile , output_file = NA ) Arguments Argument Description infile Path to a gzippped FASTQ file output_file File to write results in CSV format to. Default NA. Value A dataframe of the mean, median and quantiles of the FASTQ file Author Wenyue Xing, wenyue_xing@brown.edu August Guang, august_guang@brown.edu Examples r per_base_quality(system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\"))","title":"`per_base_quality`: Compute the mean, median, and percentiles of quality score per base."},{"location":"per_base_quality/#per_base_quality-compute-the-mean-median-and-percentiles-of-quality-score-per-base","text":"This is returned as a data frame.","title":"per_base_quality: Compute the mean, median, and percentiles of quality score per base."},{"location":"per_base_quality/#description","text":"Compute the mean, median, and percentiles of quality score per base. This is returned as a data frame.","title":"Description"},{"location":"per_base_quality/#usage","text":"per_base_quality ( infile , output_file = NA )","title":"Usage"},{"location":"per_base_quality/#arguments","text":"Argument Description infile Path to a gzippped FASTQ file output_file File to write results in CSV format to. Default NA.","title":"Arguments"},{"location":"per_base_quality/#value","text":"A dataframe of the mean, median and quantiles of the FASTQ file","title":"Value"},{"location":"per_base_quality/#author","text":"Wenyue Xing, wenyue_xing@brown.edu August Guang, august_guang@brown.edu","title":"Author"},{"location":"per_base_quality/#examples","text":"r per_base_quality(system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\"))","title":"Examples"},{"location":"per_read_quality/","text":"per_read_quality : Compute the mean quality score per read. per_read_quality Description Compute the mean quality score per read. per_read_quality Usage per_read_quality ( infile , output_file = NA ) Arguments Argument Description infile Path to FASTQ file output_file File to write plot to. Will not write to file if NA. Default NA. Value Data frame of mean quality score per read Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") prq <- per_read_quality(infile) ```","title":"`per_read_quality`: Compute the mean quality score per read."},{"location":"per_read_quality/#per_read_quality-compute-the-mean-quality-score-per-read","text":"per_read_quality","title":"per_read_quality: Compute the mean quality score per read."},{"location":"per_read_quality/#description","text":"Compute the mean quality score per read. per_read_quality","title":"Description"},{"location":"per_read_quality/#usage","text":"per_read_quality ( infile , output_file = NA )","title":"Usage"},{"location":"per_read_quality/#arguments","text":"Argument Description infile Path to FASTQ file output_file File to write plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"per_read_quality/#value","text":"Data frame of mean quality score per read","title":"Value"},{"location":"per_read_quality/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") prq <- per_read_quality(infile) ```","title":"Examples"},{"location":"plot_GC_content/","text":"plot_GC_content : Generate mean GC content histogram. Description Generate mean GC content histogram. Usage plot_GC_content ( gc_df , output_file = NA ) Arguments Argument Description gc_df the object that is the GC content vectors generated from GC content function output_file File to write plot to. Will not write to file if NA. Default NA. Value A histogram of mean GC content. Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") gc_df<-GC_content(infile) plot_GC_content(gc_df) ```","title":"`plot_GC_content`: Generate mean GC content histogram."},{"location":"plot_GC_content/#plot_gc_content-generate-mean-gc-content-histogram","text":"","title":"plot_GC_content: Generate mean GC content histogram."},{"location":"plot_GC_content/#description","text":"Generate mean GC content histogram.","title":"Description"},{"location":"plot_GC_content/#usage","text":"plot_GC_content ( gc_df , output_file = NA )","title":"Usage"},{"location":"plot_GC_content/#arguments","text":"Argument Description gc_df the object that is the GC content vectors generated from GC content function output_file File to write plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_GC_content/#value","text":"A histogram of mean GC content.","title":"Value"},{"location":"plot_GC_content/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") gc_df<-GC_content(infile) plot_GC_content(gc_df) ```","title":"Examples"},{"location":"plot_adapter_content/","text":"plot_adapter_content : Creates a bar plot of the top 5 most present adapter sequences. Description Creates a bar plot of the top 5 most present adapter sequences. Usage plot_adapter_content ( ac_sorted , output_file = NA ) Arguments Argument Description ac_sorted Sorted table of adapters and counts. output_file File to save data frame to. Default NA. Value Barplot of top 5 most frequent adapter sequences. Examples r if(.Platform$OS.type != \"windows\") { infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") ac_sorted <- adapter_content(infile) plot_adapter_content(ac_sorted) }","title":"`plot_adapter_content`: Creates a bar plot of the top 5 most present adapter sequences."},{"location":"plot_adapter_content/#plot_adapter_content-creates-a-bar-plot-of-the-top-5-most-present-adapter-sequences","text":"","title":"plot_adapter_content: Creates a bar plot of the top 5 most present adapter sequences."},{"location":"plot_adapter_content/#description","text":"Creates a bar plot of the top 5 most present adapter sequences.","title":"Description"},{"location":"plot_adapter_content/#usage","text":"plot_adapter_content ( ac_sorted , output_file = NA )","title":"Usage"},{"location":"plot_adapter_content/#arguments","text":"Argument Description ac_sorted Sorted table of adapters and counts. output_file File to save data frame to. Default NA.","title":"Arguments"},{"location":"plot_adapter_content/#value","text":"Barplot of top 5 most frequent adapter sequences.","title":"Value"},{"location":"plot_adapter_content/#examples","text":"r if(.Platform$OS.type != \"windows\") { infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") ac_sorted <- adapter_content(infile) plot_adapter_content(ac_sorted) }","title":"Examples"},{"location":"plot_outliers/","text":"plot_outliers : Determine how to plot outliers. Heuristic used is whether their obsexp_ratio differs by more than 1 and whether they fall into the same bin or not. If for 2 outliers, obsexp_ratio differs by less than .4 and they are in the same bin, then combine into a single plotting point. NOT FULLY FUNCTIONAL Description Determine how to plot outliers. Heuristic used is whether their obsexp_ratio differs by more than 1 and whether they fall into the same bin or not. If for 2 outliers, obsexp_ratio differs by less than .4 and they are in the same bin, then combine into a single plotting point. NOT FULLY FUNCTIONAL Usage plot_outliers ( overkm , top_num ) Arguments Argument Description overkm data frame with columns pos, obsexp_ratio, and kmer that has already been reordered by descending obsexp_ratio top_num number of most overrepresented kmers to plot. Default is 5. Value currently 0 as function is not fully working.","title":"`plot_outliers`: Determine how to plot outliers. Heuristic used is whether their obsexp_ratio differs by more than 1"},{"location":"plot_outliers/#plot_outliers-determine-how-to-plot-outliers-heuristic-used-is-whether-their-obsexp_ratio-differs-by-more-than-1","text":"and whether they fall into the same bin or not. If for 2 outliers, obsexp_ratio differs by less than .4 and they are in the same bin, then combine into a single plotting point. NOT FULLY FUNCTIONAL","title":"plot_outliers: Determine how to plot outliers. Heuristic used is whether their obsexp_ratio differs by more than 1"},{"location":"plot_outliers/#description","text":"Determine how to plot outliers. Heuristic used is whether their obsexp_ratio differs by more than 1 and whether they fall into the same bin or not. If for 2 outliers, obsexp_ratio differs by less than .4 and they are in the same bin, then combine into a single plotting point. NOT FULLY FUNCTIONAL","title":"Description"},{"location":"plot_outliers/#usage","text":"plot_outliers ( overkm , top_num )","title":"Usage"},{"location":"plot_outliers/#arguments","text":"Argument Description overkm data frame with columns pos, obsexp_ratio, and kmer that has already been reordered by descending obsexp_ratio top_num number of most overrepresented kmers to plot. Default is 5.","title":"Arguments"},{"location":"plot_outliers/#value","text":"currently 0 as function is not fully working.","title":"Value"},{"location":"plot_overrep_kmer/","text":"plot_overrep_kmer : Create a box plot of the log2(observed/expected) ratio across the length of the sequence as well as top overrepresented kmers. Only ratios greater than 2 are included in the box plot. Default is 20 bins across the length of the sequence and the top 2 overrepresented kmers, but this can be changed by the user. Description Create a box plot of the log2(observed/expected) ratio across the length of the sequence as well as top overrepresented kmers. Only ratios greater than 2 are included in the box plot. Default is 20 bins across the length of the sequence and the top 2 overrepresented kmers, but this can be changed by the user. Usage plot_overrep_kmer ( overkm , bins = 20 , top_num = 2 , output_file = NA ) Arguments Argument Description overkm data frame with columns pos, obsexp_ratio, and kmer bins number of intervals across the length of the sequence top_num number of most overrepresented kmers to plot output_file File to write plot to. Will not write to file if NA. Default NA. Value A box plot of the log2(observed/expected ratio) across the length of the sequence Examples r infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") over_km <- overrep_kmer(infile,k=4) plot_overrep_kmer(over_km)","title":"`plot_overrep_kmer`: Create a box plot of the log2(observed/expected) ratio across the length of the sequence as well as top"},{"location":"plot_overrep_kmer/#plot_overrep_kmer-create-a-box-plot-of-the-log2observedexpected-ratio-across-the-length-of-the-sequence-as-well-as-top","text":"overrepresented kmers. Only ratios greater than 2 are included in the box plot. Default is 20 bins across the length of the sequence and the top 2 overrepresented kmers, but this can be changed by the user.","title":"plot_overrep_kmer: Create a box plot of the log2(observed/expected) ratio across the length of the sequence as well as top"},{"location":"plot_overrep_kmer/#description","text":"Create a box plot of the log2(observed/expected) ratio across the length of the sequence as well as top overrepresented kmers. Only ratios greater than 2 are included in the box plot. Default is 20 bins across the length of the sequence and the top 2 overrepresented kmers, but this can be changed by the user.","title":"Description"},{"location":"plot_overrep_kmer/#usage","text":"plot_overrep_kmer ( overkm , bins = 20 , top_num = 2 , output_file = NA )","title":"Usage"},{"location":"plot_overrep_kmer/#arguments","text":"Argument Description overkm data frame with columns pos, obsexp_ratio, and kmer bins number of intervals across the length of the sequence top_num number of most overrepresented kmers to plot output_file File to write plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_overrep_kmer/#value","text":"A box plot of the log2(observed/expected ratio) across the length of the sequence","title":"Value"},{"location":"plot_overrep_kmer/#examples","text":"r infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") over_km <- overrep_kmer(infile,k=4) plot_overrep_kmer(over_km)","title":"Examples"},{"location":"plot_overrep_reads/","text":"plot_overrep_reads : Plot the top 5 seqeunces Description Plot the top 5 seqeunces Usage plot_overrep_reads ( overrep_reads , output_file = NA ) Arguments Argument Description overrep_reads the table that sorts the sequence content and corresponding counts in descending order output_file File to save plot to. Will not write to file if NA. Default NA. Value plot of the top 5 overrepresented sequences Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") overrep_df <- overrep_reads(infile) plot_overrep_reads(overrep_df) ```","title":"`plot_overrep_reads`: Plot the top 5 seqeunces"},{"location":"plot_overrep_reads/#plot_overrep_reads-plot-the-top-5-seqeunces","text":"","title":"plot_overrep_reads: Plot the top 5 seqeunces"},{"location":"plot_overrep_reads/#description","text":"Plot the top 5 seqeunces","title":"Description"},{"location":"plot_overrep_reads/#usage","text":"plot_overrep_reads ( overrep_reads , output_file = NA )","title":"Usage"},{"location":"plot_overrep_reads/#arguments","text":"Argument Description overrep_reads the table that sorts the sequence content and corresponding counts in descending order output_file File to save plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_overrep_reads/#value","text":"plot of the top 5 overrepresented sequences","title":"Value"},{"location":"plot_overrep_reads/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") overrep_df <- overrep_reads(infile) plot_overrep_reads(overrep_df) ```","title":"Examples"},{"location":"plot_per_base_quality/","text":"plot_per_base_quality : Generate a boxplot of the per position quality score. Description Generate a boxplot of the per position quality score. Usage plot_per_base_quality ( per_base_quality , output_file = NA ) Arguments Argument Description per_base_quality a data frame of the mean, median and quantiles of sequence quality per base. Most likely generated with the per_base_quality function. output_file File to save plot to. Will not write to file if NA. Default NA. Value A boxplot of per position quality score distribution. Examples ```r pbq <- per_base_quality(system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\")) plot_per_base_quality(pbq) ```","title":"`plot_per_base_quality`: Generate a boxplot of the per position quality score."},{"location":"plot_per_base_quality/#plot_per_base_quality-generate-a-boxplot-of-the-per-position-quality-score","text":"","title":"plot_per_base_quality: Generate a boxplot of the per position quality score."},{"location":"plot_per_base_quality/#description","text":"Generate a boxplot of the per position quality score.","title":"Description"},{"location":"plot_per_base_quality/#usage","text":"plot_per_base_quality ( per_base_quality , output_file = NA )","title":"Usage"},{"location":"plot_per_base_quality/#arguments","text":"Argument Description per_base_quality a data frame of the mean, median and quantiles of sequence quality per base. Most likely generated with the per_base_quality function. output_file File to save plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_per_base_quality/#value","text":"A boxplot of per position quality score distribution.","title":"Value"},{"location":"plot_per_base_quality/#examples","text":"```r pbq <- per_base_quality(system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\")) plot_per_base_quality(pbq) ```","title":"Examples"},{"location":"plot_per_read_quality/","text":"plot_per_read_quality : Plot the mean quality score per sequence as a histogram. High quality sequences are those mostly distributed over 30. Low quality sequences are those mostly under 30. plot_per_read_quality Description Plot the mean quality score per sequence as a histogram. High quality sequences are those mostly distributed over 30. Low quality sequences are those mostly under 30. plot_per_read_quality Usage plot_per_read_quality ( prq , output_file = NA ) Arguments Argument Description prq Data frame from per_read_quality function output_file File to write plot to. Will not write to file if NA. Default NA. Value Plot of mean quality score per read Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") prq <- per_read_quality(infile) plot_per_read_quality(prq)","title":"`plot_per_read_quality`: Plot the mean quality score per sequence as a histogram."},{"location":"plot_per_read_quality/#plot_per_read_quality-plot-the-mean-quality-score-per-sequence-as-a-histogram","text":"High quality sequences are those mostly distributed over 30. Low quality sequences are those mostly under 30. plot_per_read_quality","title":"plot_per_read_quality: Plot the mean quality score per sequence as a histogram."},{"location":"plot_per_read_quality/#description","text":"Plot the mean quality score per sequence as a histogram. High quality sequences are those mostly distributed over 30. Low quality sequences are those mostly under 30. plot_per_read_quality","title":"Description"},{"location":"plot_per_read_quality/#usage","text":"plot_per_read_quality ( prq , output_file = NA )","title":"Usage"},{"location":"plot_per_read_quality/#arguments","text":"Argument Description prq Data frame from per_read_quality function output_file File to write plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_per_read_quality/#value","text":"Plot of mean quality score per read","title":"Value"},{"location":"plot_per_read_quality/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") prq <- per_read_quality(infile) plot_per_read_quality(prq)","title":"Examples"},{"location":"plot_read_content/","text":"plot_read_content : Plot the per position nucleotide content. Description Plot the per position nucleotide content. Usage plot_read_content ( read_content , output_file = NA ) Arguments Argument Description read_content Data frame produced by read_content function. output_file File to save plot to. Will not write to file if NA. Default NA. Value ggplot line plot of all nucleotide content inclding A, T, G, C and N Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_content <- read_content(fseq) plot_read_content(read_content)","title":"`plot_read_content`: Plot the per position nucleotide content."},{"location":"plot_read_content/#plot_read_content-plot-the-per-position-nucleotide-content","text":"","title":"plot_read_content: Plot the per position nucleotide content."},{"location":"plot_read_content/#description","text":"Plot the per position nucleotide content.","title":"Description"},{"location":"plot_read_content/#usage","text":"plot_read_content ( read_content , output_file = NA )","title":"Usage"},{"location":"plot_read_content/#arguments","text":"Argument Description read_content Data frame produced by read_content function. output_file File to save plot to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"plot_read_content/#value","text":"ggplot line plot of all nucleotide content inclding A, T, G, C and N","title":"Value"},{"location":"plot_read_content/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_content <- read_content(fseq) plot_read_content(read_content)","title":"Examples"},{"location":"plot_read_length/","text":"plot_read_length : Plot a histogram of the number of reads with each read length. Description Plot a histogram of the number of reads with each read length. Usage plot_read_length ( read_len , output_file = NA ) Arguments Argument Description read_len Data frame of read lengths and number of reads with that length. output_file File to save plot to. Default is NA, i.e. do not write to file. Value A histogram of the read length distribution. Author Wenyue Xing, wenyue_xing@brown.edu , August Guang, august_guang@brown.edu Examples ```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_len <- read_length(fseq) plot_read_length(read_len) ```","title":"`plot_read_length`: Plot a histogram of the number of reads with each read length."},{"location":"plot_read_length/#plot_read_length-plot-a-histogram-of-the-number-of-reads-with-each-read-length","text":"","title":"plot_read_length: Plot a histogram of the number of reads with each read length."},{"location":"plot_read_length/#description","text":"Plot a histogram of the number of reads with each read length.","title":"Description"},{"location":"plot_read_length/#usage","text":"plot_read_length ( read_len , output_file = NA )","title":"Usage"},{"location":"plot_read_length/#arguments","text":"Argument Description read_len Data frame of read lengths and number of reads with that length. output_file File to save plot to. Default is NA, i.e. do not write to file.","title":"Arguments"},{"location":"plot_read_length/#value","text":"A histogram of the read length distribution.","title":"Value"},{"location":"plot_read_length/#author","text":"Wenyue Xing, wenyue_xing@brown.edu , August Guang, august_guang@brown.edu","title":"Author"},{"location":"plot_read_length/#examples","text":"```r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_len <- read_length(fseq) plot_read_length(read_len) ```","title":"Examples"},{"location":"qual_score_per_read/","text":"qual_score_per_read : Calculate the mean quality score per read of the FASTQ gzipped file Description Calculate the mean quality score per read of the FASTQ gzipped file Usage qual_score_per_read ( infile ) Arguments Argument Description infile A string giving the path for the fastqfile Value mean quality per read Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") qual_score_per_read(infile)$q50_per_position[1:10]","title":"`qual_score_per_read`: Calculate the mean quality score per read of the FASTQ gzipped file"},{"location":"qual_score_per_read/#qual_score_per_read-calculate-the-mean-quality-score-per-read-of-the-fastq-gzipped-file","text":"","title":"qual_score_per_read: Calculate the mean quality score per read of the FASTQ gzipped file"},{"location":"qual_score_per_read/#description","text":"Calculate the mean quality score per read of the FASTQ gzipped file","title":"Description"},{"location":"qual_score_per_read/#usage","text":"qual_score_per_read ( infile )","title":"Usage"},{"location":"qual_score_per_read/#arguments","text":"Argument Description infile A string giving the path for the fastqfile","title":"Arguments"},{"location":"qual_score_per_read/#value","text":"mean quality per read","title":"Value"},{"location":"qual_score_per_read/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") qual_score_per_read(infile)$q50_per_position[1:10]","title":"Examples"},{"location":"read_base_content/","text":"read_base_content : Compute nucleotide content per position for a single base pair. Wrapper function around seqTools. Description Compute nucleotide content per position for a single base pair. Wrapper function around seqTools. Usage read_base_content ( fseq , content ) Arguments Argument Description fseq a seqTools::fastqq object content nucleotide. Options are \"A\",\"T\",\"G\",\"C\",\"N\"(either capital or lower case) Value Nucleotide sequence content per position. Author Wenyue Xing, wenyue_xing@brown.edu , August Guang august_guang@brown.edu Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_base_content(fseq,\"A\")","title":"`read_base_content`: Compute nucleotide content per position for a single base pair. Wrapper function around seqTools."},{"location":"read_base_content/#read_base_content-compute-nucleotide-content-per-position-for-a-single-base-pair-wrapper-function-around-seqtools","text":"","title":"read_base_content: Compute nucleotide content per position for a single base pair. Wrapper function around seqTools."},{"location":"read_base_content/#description","text":"Compute nucleotide content per position for a single base pair. Wrapper function around seqTools.","title":"Description"},{"location":"read_base_content/#usage","text":"read_base_content ( fseq , content )","title":"Usage"},{"location":"read_base_content/#arguments","text":"Argument Description fseq a seqTools::fastqq object content nucleotide. Options are \"A\",\"T\",\"G\",\"C\",\"N\"(either capital or lower case)","title":"Arguments"},{"location":"read_base_content/#value","text":"Nucleotide sequence content per position.","title":"Value"},{"location":"read_base_content/#author","text":"Wenyue Xing, wenyue_xing@brown.edu , August Guang august_guang@brown.edu","title":"Author"},{"location":"read_base_content/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_base_content(fseq,\"A\")","title":"Examples"},{"location":"read_content/","text":"read_content : Compute nucleotide content per position. Wrapper function around seqTools. Description Compute nucleotide content per position. Wrapper function around seqTools. Usage read_content ( fseq , output_file = NA ) Arguments Argument Description fseq a seqTools::fastqq object output_file File to write results in CSV format to. Will not write to file if NA. Default NA. Value Data frame of nucleotide sequence content per position Examples r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_content(fseq)","title":"`read_content`: Compute nucleotide content per position. Wrapper function around seqTools."},{"location":"read_content/#read_content-compute-nucleotide-content-per-position-wrapper-function-around-seqtools","text":"","title":"read_content: Compute nucleotide content per position. Wrapper function around seqTools."},{"location":"read_content/#description","text":"Compute nucleotide content per position. Wrapper function around seqTools.","title":"Description"},{"location":"read_content/#usage","text":"read_content ( fseq , output_file = NA )","title":"Usage"},{"location":"read_content/#arguments","text":"Argument Description fseq a seqTools::fastqq object output_file File to write results in CSV format to. Will not write to file if NA. Default NA.","title":"Arguments"},{"location":"read_content/#value","text":"Data frame of nucleotide sequence content per position","title":"Value"},{"location":"read_content/#examples","text":"r infile <- system.file(\"extdata\", \"10^5_reads_test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_content(fseq)","title":"Examples"},{"location":"read_length/","text":"read_length : Creates a data frame of read lengths and the number of reads with that read length. Description Creates a data frame of read lengths and the number of reads with that read length. Usage read_length ( fseq , output_file = NA ) Arguments Argument Description fseq a seqTools object produced by seqTools::fastqq on the raw FASTQ file output_file File to save data frame to. Default NA. Value Data frame of read lengths and number of reads with that length. Examples r infile <- system.file(\"extdata\",\"test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_len <- read_length(fseq)","title":"`read_length`: Creates a data frame of read lengths and the number of reads with"},{"location":"read_length/#read_length-creates-a-data-frame-of-read-lengths-and-the-number-of-reads-with","text":"that read length.","title":"read_length: Creates a data frame of read lengths and the number of reads with"},{"location":"read_length/#description","text":"Creates a data frame of read lengths and the number of reads with that read length.","title":"Description"},{"location":"read_length/#usage","text":"read_length ( fseq , output_file = NA )","title":"Usage"},{"location":"read_length/#arguments","text":"Argument Description fseq a seqTools object produced by seqTools::fastqq on the raw FASTQ file output_file File to save data frame to. Default NA.","title":"Arguments"},{"location":"read_length/#value","text":"Data frame of read lengths and number of reads with that length.","title":"Value"},{"location":"read_length/#examples","text":"r infile <- system.file(\"extdata\",\"test.fq.gz\", package = \"qckitfastq\") fseq <- seqTools::fastqq(infile,k=6) read_len <- read_length(fseq)","title":"Examples"},{"location":"run_all/","text":"run_all : Will run all functions in the qckitfastq suite and save the data frames and plots to a user-provided directory. Plot names are supplied by default. Description Will run all functions in the qckitfastq suite and save the data frames and plots to a user-provided directory. Plot names are supplied by default. Usage run_all ( infile , dir ) Arguments Argument Description infile Path to gzipped FASTQ file dir Directory to save results to Value Generate files from all functions Examples r infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") testfolder <- tempdir() run_all(infile, testfolder)","title":"`run_all`: Will run all functions in the qckitfastq suite and save the data frames"},{"location":"run_all/#run_all-will-run-all-functions-in-the-qckitfastq-suite-and-save-the-data-frames","text":"and plots to a user-provided directory. Plot names are supplied by default.","title":"run_all: Will run all functions in the qckitfastq suite and save the data frames"},{"location":"run_all/#description","text":"Will run all functions in the qckitfastq suite and save the data frames and plots to a user-provided directory. Plot names are supplied by default.","title":"Description"},{"location":"run_all/#usage","text":"run_all ( infile , dir )","title":"Usage"},{"location":"run_all/#arguments","text":"Argument Description infile Path to gzipped FASTQ file dir Directory to save results to","title":"Arguments"},{"location":"run_all/#value","text":"Generate files from all functions","title":"Value"},{"location":"run_all/#examples","text":"r infile <- system.file(\"extdata\", \"test.fq.gz\", package = \"qckitfastq\") testfolder <- tempdir() run_all(infile, testfolder)","title":"Examples"},{"location":"vignette-qckitfastq/","text":"Introduction qckitfastq is part of the planned qckit suite of packages from the Computational Biology Core at Brown University . The long-term goal of the qckit suite is to not only provide comprehensive quality control metrics for common genomics sequencing workflows, but to 1) also provide quality control visualizations for multiple samples through updated modules in multiQC [@Ewels2016], and 2) provide a public quality control database which allows benchmarking of QC metrics for an experiment against other similar experiments. Users of qckitfastq will have the option to enter SRA metadata and create visualizations from our database as well as submit their qc results (if submitting an SRA archive) to our database once these features have been implemented. The purpose of this particular package is to run quality control on FASTQ files from genome sequencing. Why use qckitfastq? Indeed there are many other quality control packages for FASTQ files existing already, including ShortReads [@shortread] and seqTools [@seqtools] for R and the popular FASTQC [@Andrews2010] Java-based program. qckitfastq offers a few advantages compared to these 3 programs for users who need such features: access to raw sequence and quality data access to data frames of the quality control results in addition to plots quality control analyses of the entire FASTQ file fast file processing To break it down further, seqTools and ShortReads do not offer as comprehensive set of quality control metrics as qckitfastq and FASTQC. seqTools further provides limited access to raw data and intermediate analysis results. ShortRead provides users with access to the raw sequencing data and intermedite analysis results, but is inefficient on datasets exceeding 10 million reads. FASTQC meanwhile truncates any reads longer than 75bp as well as estimates overall quality only based on the first 100,000 reads of any FASTQ file. qckitfastq does not contain any of these limitations. Running qckitfastq qckitfastq provides the following metrics: Read length distribution Per base read quality Per read read quality GC content Nucleotide read content Kmer count Overrepresented reads Overrepresented kmers Adapter content The simplest way to run qckitfastq is by executing run_all , a single command that will produce a report of all of the included metrics in a user-provided directory with some default parameters. However, each metric can also be run separately for closer examination. Individual metrics For each individual metric that qckitfastq provides, the user can choose to save either the data frame for the metric, the associated plot, or both. Our example in this vignette has 25,000 reads, each 100bp long. The majority of metrics are run on the path to the FASTQ file. Some functions for quality control in this package are simply wrappers around seqTools due to the fact that their functions are fast. We provide these wrappers for the sake of completeness in quality control metrics. These wrappers require processing the FASTQ data through the seqTools::fastqq command first: library ( qckitfastq ) infile <- system.file ( \"extdata\" , \"10^5_reads_test.fq.gz\" , package = \"qckitfastq\" ) fseq <- seqTools :: fastqq ( infile ) ## [ fastqq ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . Read length distribution read_length generates a data frame of read lengths and the number of reads with that particular read length. plot_read_length generates a distribution plot of the length of all reads. The generated plot would show the sequence length of all the sequences throughout the file. The plot is considered an indication of good data quality is all sequences have roughly the same sequence length with minimal deviations. The following plot shows that all reads in the file have sequence length of 100. read_len <- read_length ( fseq ) kable ( head ( read_len )) %>% kable_styling () read_length num_reads 1 0 2 0 3 0 4 0 5 0 6 0 plot_read_length ( read_len ) Per base quality The per_base_quality function calculates quality score per base summary statistics of 10th, 25th, median, 75th and 90th quantiles across sequences. Currently it treats all quality score encodings as Phred+33. We can use the result to create a quality score distribution per position plot using plot_per_base_quality . As a basic heuristic, quality scores above 28 can be categorized as good (green), those from 20 to 28 can be categorized as medium (yellow), and under 20 is bad (red). bs <- per_base_quality ( infile ) kable ( head ( bs )) %>% kable_styling () position q10 q25 median q75 q90 1 32 32 32 32 32 2 32 32 32 32 32 3 32 37 37 37 37 4 37 37 37 37 37 5 37 37 37 37 37 6 37 41 41 41 41 plot_per_base_quality ( bs ) Per read quality score The per_read_quality function compute the mean quality score per read. We can then use plot_per_read_quality to generate a histogram of this statistics. The histogram is considered an indication of good data quality if the majority of reads have mean quality scores greater than 30. If a significant portion of reads have quality scores less than 30, then the data most likely has issues that need to be examined. prq <- per_read_quality ( infile ) kable ( head ( prq )) %>% kable_styling () read sequence_mean 1 39.11 2 38.15 3 40.35 4 40.35 5 39.83 6 40.40 plot_per_read_quality ( prq ) Per read GC content The GC_content function computes the GC nucleotide content percentage per read, and plot_GC_content plots the distribution of GC content. As a general rule, an indication of good data quality is when the GC content percentage in each read is between 30 and 50% and roughly follows a normal distribution. gc_df <- GC_content ( infile ) kable ( head ( gc_df )) %>% kable_styling () read mean_GC 1 43 2 37 3 39 4 40 5 42 6 38 plot_GC_content ( gc_df ) Per position nucleotide read content read_content calculates the total numbers across reads of each nucleotide base by position. plot_read_content plots the percentage of nucleotide content per position. We also provide an additional function read_base_content that allows the user to get the nucleotide base content by position across reads for a specific nucleotide (options are a,c,t,g,n). As a general rule, the plot would be considered an indication of good data quality when the percentage of each nucleotide sequence content is about evenly distributed across all bases. However, there are some types of analyses for which this will not be the case. For example, RNA-Seq will have an uneven sequence content distribution in the first 10 bases, and RRBS will have almost no cytosines and very high thymine content because the library prep protocol converts most C to T [@Meissner2005]. Knowledge of the library prep protocol is thus important for evaluating quality in terms of nucleotide sequence content. scA <- read_base_content ( fseq , content = \"A\" ) kable ( head ( scA )) %>% kable_styling () x 4351 5341 5995 6262 6624 6689 rc <- read_content ( fseq ) kable ( head ( rc )) %>% kable_styling () position a c t g n 1 4351 7760 5807 6745 337 2 5341 4297 9661 5689 12 3 5995 3626 9264 6115 0 4 6262 4066 9324 5348 0 5 6624 4078 8019 6279 0 6 6689 3833 8001 6477 0 plot_read_content ( rc ) Per position kmer count kmer_count function produces the per position kmer count with given path to the FASTQ file and the kmer length specified. km <- kmer_count ( infile , k = 6 ) ## [ fastq_Klocs ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . kable ( head ( km )) %>% kable_styling () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 AAAAAA 14 9 44 18 33 42 69 163 41 34 15 37 28 49 63 28 29 19 50 30 30 18 26 85 22 31 36 33 175 35 46 22 73 32 31 40 53 63 96 36 26 35 23 36 71 39 38 23 29 52 59 108 55 83 29 27 18 51 83 113 166 50 85 53 39 64 52 56 79 101 50 82 165 92 56 36 29 33 62 72 69 165 120 131 126 106 42 43 64 109 171 66 79 120 129 AAAAAC 8 4 1 24 2 9 21 14 142 5 7 1 12 13 18 32 15 4 6 3 11 12 2 14 47 4 10 6 9 23 22 32 11 52 10 5 1 29 48 81 23 8 15 7 13 17 23 21 9 13 22 34 67 40 27 13 12 8 16 28 28 134 28 65 37 20 16 11 28 58 80 18 43 84 44 18 14 9 8 19 20 7 12 17 21 54 55 18 17 27 17 55 34 11 19 AAAAAG 2 2 0 3 2 3 2 2 1 1 1 0 1 2 1 1 0 1 4 1 1 0 1 2 1 4 1 3 0 1 1 1 1 1 2 1 0 2 1 3 1 0 1 3 2 0 1 1 5 1 1 0 4 1 0 1 1 2 0 0 1 0 1 1 2 0 2 0 0 3 1 2 0 3 2 4 3 1 2 2 2 3 3 3 21 5 0 2 0 2 5 9 4 2 3 AAAAAT 8 28 29 34 44 34 33 65 28 58 43 36 36 21 39 41 75 74 42 99 28 33 26 29 49 38 25 38 34 170 24 43 18 32 31 48 76 42 23 21 24 31 30 25 45 69 21 40 31 35 39 78 79 29 92 27 41 20 46 79 95 55 29 42 14 60 63 84 54 44 26 36 48 85 67 69 46 36 33 68 110 101 211 92 120 87 85 61 49 51 144 124 67 86 145 AAAACA 0 2 5 4 4 3 4 6 3 3 3 6 8 3 4 6 5 1 11 8 5 3 15 13 16 8 6 6 3 13 5 10 8 6 30 3 4 9 13 14 9 8 16 10 13 4 10 34 10 9 14 13 15 14 16 97 17 27 9 21 18 34 33 35 45 9 29 39 14 37 43 5 5 14 16 9 7 15 13 19 6 13 35 12 12 10 13 14 16 14 101 21 23 9 17 AAAACC 2 8 4 1 25 2 9 21 15 143 4 8 1 11 13 15 32 14 4 6 3 11 10 2 16 47 5 9 5 8 21 20 27 12 53 11 6 1 26 50 77 22 8 13 7 12 19 22 20 9 11 21 29 65 35 27 13 10 7 16 25 27 132 26 63 37 19 14 9 27 58 80 17 44 84 44 18 11 8 6 19 18 8 11 16 22 53 57 16 20 26 17 55 32 11 Overrepresented reads overrep_reads produces a data frame consisting of overrepresented reads and their counts in decreasing order of counts. Here overrepresented is defined as unique reads that have counts larger than 0.1% of the total reads in the file. plot_overrep_reads produces a density plot of the counts and marks the top 5 overrepresented reads in red. overrep_reads <- overrep_reads ( infile ) knitr :: kable ( head ( overrep_reads , n = 5 )) %>% kable_styling () read_sequence count TGGGTGTGAGGAGTTCAGTTATATGTTTGGGATTTTTTAGGTAGTGGGTGTTGAGCTTGAACGCTTTCTTAATTGGTGGCTGCTTTTAGGCCTACTATGG 123 CCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGCAATAGATATA 122 CACTAGGAAAAAACCTTGTAGAGAGAGTAAAAAATTTAACACCCATAGTAGGCCTAAAAGCAGCCACCAATTAAGAAAGCGTTCAAGCTCAACACCCACT 120 CTAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGC 117 TAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGCA 116 plot_overrep_reads ( overrep_reads ) Overrepresented kmers overrep_kmer generates a data frame of overrepresented kmers with its maximum log2(observed/expected) ratio and the position of the maximum obs/exp ratio in descending order. Only those kmers with a ratio greater than 2 are returned in the data frame. We can also create a boxplot of the obs/exp ratio thatn includes plotting the top 2 (or n) kmer outliers. overkm <- overrep_kmer ( infile , 7 ) ## [ fastqq ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . ## [ fastq_Klocs ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . knitr :: kable ( head ( overkm , n = 10 )) %>% kable_styling () row position obsexp_ratio kmer 15353 6 11.109619 TGTTTGA 16316 2 10.580131 TTTGTGT 8175 1 10.552171 CTTTGTG 12031 5 9.685497 GTGTTTG 12259 7 9.638035 GTTTGAG 15296 4 9.565904 TGTGTTT 8066 56 9.445229 CTTGAAC 16112 3 9.444925 TTGTGTT 12108 13 9.314122 GTTCAGT 2553 54 9.278962 AGCTTGA plot_overrep_kmer ( overkm ) Adapter content adapter_content computes the counts of a pre-determined set of adapter sequences and reports back any exceeding 0.1% of the total reads, sorted from most abundant to least abundant. plot_adapter_content creates a bar plot of the top 5 most common adapters. In this instance we will use a different file to compute adapter content, as the first example has no adapter contamination. This function is only available for macOS/Linux due to a dependency on RSeqAn/C++14, which is not supported on current Bioconductor Windows build machines. if ( .Platform $ OS.type != \"windows\" ) { infile2 <- system.file ( \"extdata\" , \"test.fq.gz\" , package = \"qckitfastq\" ) ac_sorted <- adapter_content ( infile2 ) kable ( head ( ac_sorted )) %>% kable_styling () plot_adapter_content ( ac_sorted ) } References","title":"Vignette"},{"location":"vignette-qckitfastq/#introduction","text":"qckitfastq is part of the planned qckit suite of packages from the Computational Biology Core at Brown University . The long-term goal of the qckit suite is to not only provide comprehensive quality control metrics for common genomics sequencing workflows, but to 1) also provide quality control visualizations for multiple samples through updated modules in multiQC [@Ewels2016], and 2) provide a public quality control database which allows benchmarking of QC metrics for an experiment against other similar experiments. Users of qckitfastq will have the option to enter SRA metadata and create visualizations from our database as well as submit their qc results (if submitting an SRA archive) to our database once these features have been implemented. The purpose of this particular package is to run quality control on FASTQ files from genome sequencing.","title":"Introduction"},{"location":"vignette-qckitfastq/#why-use-qckitfastq","text":"Indeed there are many other quality control packages for FASTQ files existing already, including ShortReads [@shortread] and seqTools [@seqtools] for R and the popular FASTQC [@Andrews2010] Java-based program. qckitfastq offers a few advantages compared to these 3 programs for users who need such features: access to raw sequence and quality data access to data frames of the quality control results in addition to plots quality control analyses of the entire FASTQ file fast file processing To break it down further, seqTools and ShortReads do not offer as comprehensive set of quality control metrics as qckitfastq and FASTQC. seqTools further provides limited access to raw data and intermediate analysis results. ShortRead provides users with access to the raw sequencing data and intermedite analysis results, but is inefficient on datasets exceeding 10 million reads. FASTQC meanwhile truncates any reads longer than 75bp as well as estimates overall quality only based on the first 100,000 reads of any FASTQ file. qckitfastq does not contain any of these limitations.","title":"Why use qckitfastq?"},{"location":"vignette-qckitfastq/#running-qckitfastq","text":"qckitfastq provides the following metrics: Read length distribution Per base read quality Per read read quality GC content Nucleotide read content Kmer count Overrepresented reads Overrepresented kmers Adapter content The simplest way to run qckitfastq is by executing run_all , a single command that will produce a report of all of the included metrics in a user-provided directory with some default parameters. However, each metric can also be run separately for closer examination.","title":"Running qckitfastq"},{"location":"vignette-qckitfastq/#individual-metrics","text":"For each individual metric that qckitfastq provides, the user can choose to save either the data frame for the metric, the associated plot, or both. Our example in this vignette has 25,000 reads, each 100bp long. The majority of metrics are run on the path to the FASTQ file. Some functions for quality control in this package are simply wrappers around seqTools due to the fact that their functions are fast. We provide these wrappers for the sake of completeness in quality control metrics. These wrappers require processing the FASTQ data through the seqTools::fastqq command first: library ( qckitfastq ) infile <- system.file ( \"extdata\" , \"10^5_reads_test.fq.gz\" , package = \"qckitfastq\" ) fseq <- seqTools :: fastqq ( infile ) ## [ fastqq ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done .","title":"Individual metrics"},{"location":"vignette-qckitfastq/#read-length-distribution","text":"read_length generates a data frame of read lengths and the number of reads with that particular read length. plot_read_length generates a distribution plot of the length of all reads. The generated plot would show the sequence length of all the sequences throughout the file. The plot is considered an indication of good data quality is all sequences have roughly the same sequence length with minimal deviations. The following plot shows that all reads in the file have sequence length of 100. read_len <- read_length ( fseq ) kable ( head ( read_len )) %>% kable_styling () read_length num_reads 1 0 2 0 3 0 4 0 5 0 6 0 plot_read_length ( read_len )","title":"Read length distribution"},{"location":"vignette-qckitfastq/#per-base-quality","text":"The per_base_quality function calculates quality score per base summary statistics of 10th, 25th, median, 75th and 90th quantiles across sequences. Currently it treats all quality score encodings as Phred+33. We can use the result to create a quality score distribution per position plot using plot_per_base_quality . As a basic heuristic, quality scores above 28 can be categorized as good (green), those from 20 to 28 can be categorized as medium (yellow), and under 20 is bad (red). bs <- per_base_quality ( infile ) kable ( head ( bs )) %>% kable_styling () position q10 q25 median q75 q90 1 32 32 32 32 32 2 32 32 32 32 32 3 32 37 37 37 37 4 37 37 37 37 37 5 37 37 37 37 37 6 37 41 41 41 41 plot_per_base_quality ( bs )","title":"Per base quality"},{"location":"vignette-qckitfastq/#per-read-quality","text":"The per_read_quality function compute the mean quality score per read. We can then use plot_per_read_quality to generate a histogram of this statistics. The histogram is considered an indication of good data quality if the majority of reads have mean quality scores greater than 30. If a significant portion of reads have quality scores less than 30, then the data most likely has issues that need to be examined. prq <- per_read_quality ( infile ) kable ( head ( prq )) %>% kable_styling () read sequence_mean 1 39.11 2 38.15 3 40.35 4 40.35 5 39.83 6 40.40 plot_per_read_quality ( prq )","title":"Per read quality score"},{"location":"vignette-qckitfastq/#gc-content","text":"The GC_content function computes the GC nucleotide content percentage per read, and plot_GC_content plots the distribution of GC content. As a general rule, an indication of good data quality is when the GC content percentage in each read is between 30 and 50% and roughly follows a normal distribution. gc_df <- GC_content ( infile ) kable ( head ( gc_df )) %>% kable_styling () read mean_GC 1 43 2 37 3 39 4 40 5 42 6 38 plot_GC_content ( gc_df )","title":"Per read GC content"},{"location":"vignette-qckitfastq/#nucleotide-read-content","text":"read_content calculates the total numbers across reads of each nucleotide base by position. plot_read_content plots the percentage of nucleotide content per position. We also provide an additional function read_base_content that allows the user to get the nucleotide base content by position across reads for a specific nucleotide (options are a,c,t,g,n). As a general rule, the plot would be considered an indication of good data quality when the percentage of each nucleotide sequence content is about evenly distributed across all bases. However, there are some types of analyses for which this will not be the case. For example, RNA-Seq will have an uneven sequence content distribution in the first 10 bases, and RRBS will have almost no cytosines and very high thymine content because the library prep protocol converts most C to T [@Meissner2005]. Knowledge of the library prep protocol is thus important for evaluating quality in terms of nucleotide sequence content. scA <- read_base_content ( fseq , content = \"A\" ) kable ( head ( scA )) %>% kable_styling () x 4351 5341 5995 6262 6624 6689 rc <- read_content ( fseq ) kable ( head ( rc )) %>% kable_styling () position a c t g n 1 4351 7760 5807 6745 337 2 5341 4297 9661 5689 12 3 5995 3626 9264 6115 0 4 6262 4066 9324 5348 0 5 6624 4078 8019 6279 0 6 6689 3833 8001 6477 0 plot_read_content ( rc )","title":"Per position nucleotide read content"},{"location":"vignette-qckitfastq/#kmer-count","text":"kmer_count function produces the per position kmer count with given path to the FASTQ file and the kmer length specified. km <- kmer_count ( infile , k = 6 ) ## [ fastq_Klocs ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . kable ( head ( km )) %>% kable_styling () 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 AAAAAA 14 9 44 18 33 42 69 163 41 34 15 37 28 49 63 28 29 19 50 30 30 18 26 85 22 31 36 33 175 35 46 22 73 32 31 40 53 63 96 36 26 35 23 36 71 39 38 23 29 52 59 108 55 83 29 27 18 51 83 113 166 50 85 53 39 64 52 56 79 101 50 82 165 92 56 36 29 33 62 72 69 165 120 131 126 106 42 43 64 109 171 66 79 120 129 AAAAAC 8 4 1 24 2 9 21 14 142 5 7 1 12 13 18 32 15 4 6 3 11 12 2 14 47 4 10 6 9 23 22 32 11 52 10 5 1 29 48 81 23 8 15 7 13 17 23 21 9 13 22 34 67 40 27 13 12 8 16 28 28 134 28 65 37 20 16 11 28 58 80 18 43 84 44 18 14 9 8 19 20 7 12 17 21 54 55 18 17 27 17 55 34 11 19 AAAAAG 2 2 0 3 2 3 2 2 1 1 1 0 1 2 1 1 0 1 4 1 1 0 1 2 1 4 1 3 0 1 1 1 1 1 2 1 0 2 1 3 1 0 1 3 2 0 1 1 5 1 1 0 4 1 0 1 1 2 0 0 1 0 1 1 2 0 2 0 0 3 1 2 0 3 2 4 3 1 2 2 2 3 3 3 21 5 0 2 0 2 5 9 4 2 3 AAAAAT 8 28 29 34 44 34 33 65 28 58 43 36 36 21 39 41 75 74 42 99 28 33 26 29 49 38 25 38 34 170 24 43 18 32 31 48 76 42 23 21 24 31 30 25 45 69 21 40 31 35 39 78 79 29 92 27 41 20 46 79 95 55 29 42 14 60 63 84 54 44 26 36 48 85 67 69 46 36 33 68 110 101 211 92 120 87 85 61 49 51 144 124 67 86 145 AAAACA 0 2 5 4 4 3 4 6 3 3 3 6 8 3 4 6 5 1 11 8 5 3 15 13 16 8 6 6 3 13 5 10 8 6 30 3 4 9 13 14 9 8 16 10 13 4 10 34 10 9 14 13 15 14 16 97 17 27 9 21 18 34 33 35 45 9 29 39 14 37 43 5 5 14 16 9 7 15 13 19 6 13 35 12 12 10 13 14 16 14 101 21 23 9 17 AAAACC 2 8 4 1 25 2 9 21 15 143 4 8 1 11 13 15 32 14 4 6 3 11 10 2 16 47 5 9 5 8 21 20 27 12 53 11 6 1 26 50 77 22 8 13 7 12 19 22 20 9 11 21 29 65 35 27 13 10 7 16 25 27 132 26 63 37 19 14 9 27 58 80 17 44 84 44 18 11 8 6 19 18 8 11 16 22 53 57 16 20 26 17 55 32 11","title":"Per position kmer count"},{"location":"vignette-qckitfastq/#overrep-reads","text":"overrep_reads produces a data frame consisting of overrepresented reads and their counts in decreasing order of counts. Here overrepresented is defined as unique reads that have counts larger than 0.1% of the total reads in the file. plot_overrep_reads produces a density plot of the counts and marks the top 5 overrepresented reads in red. overrep_reads <- overrep_reads ( infile ) knitr :: kable ( head ( overrep_reads , n = 5 )) %>% kable_styling () read_sequence count TGGGTGTGAGGAGTTCAGTTATATGTTTGGGATTTTTTAGGTAGTGGGTGTTGAGCTTGAACGCTTTCTTAATTGGTGGCTGCTTTTAGGCCTACTATGG 123 CCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGCAATAGATATA 122 CACTAGGAAAAAACCTTGTAGAGAGAGTAAAAAATTTAACACCCATAGTAGGCCTAAAAGCAGCCACCAATTAAGAAAGCGTTCAAGCTCAACACCCACT 120 CTAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGC 117 TAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCTTAGCCAAACCATTTACCCAAATAAAGTATAGGCGATAGAAATTGAAACCTGGCGCA 116 plot_overrep_reads ( overrep_reads )","title":"Overrepresented reads"},{"location":"vignette-qckitfastq/#overrep-kmers","text":"overrep_kmer generates a data frame of overrepresented kmers with its maximum log2(observed/expected) ratio and the position of the maximum obs/exp ratio in descending order. Only those kmers with a ratio greater than 2 are returned in the data frame. We can also create a boxplot of the obs/exp ratio thatn includes plotting the top 2 (or n) kmer outliers. overkm <- overrep_kmer ( infile , 7 ) ## [ fastqq ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . ## [ fastq_Klocs ] File ( 1 / 1 ) '/home/travis/miniconda/envs/test-env/lib/R/library/qckitfastq/extdata/10^5_reads_test.fq.gz' done . knitr :: kable ( head ( overkm , n = 10 )) %>% kable_styling () row position obsexp_ratio kmer 15353 6 11.109619 TGTTTGA 16316 2 10.580131 TTTGTGT 8175 1 10.552171 CTTTGTG 12031 5 9.685497 GTGTTTG 12259 7 9.638035 GTTTGAG 15296 4 9.565904 TGTGTTT 8066 56 9.445229 CTTGAAC 16112 3 9.444925 TTGTGTT 12108 13 9.314122 GTTCAGT 2553 54 9.278962 AGCTTGA plot_overrep_kmer ( overkm )","title":"Overrepresented kmers"},{"location":"vignette-qckitfastq/#adapter-content","text":"adapter_content computes the counts of a pre-determined set of adapter sequences and reports back any exceeding 0.1% of the total reads, sorted from most abundant to least abundant. plot_adapter_content creates a bar plot of the top 5 most common adapters. In this instance we will use a different file to compute adapter content, as the first example has no adapter contamination. This function is only available for macOS/Linux due to a dependency on RSeqAn/C++14, which is not supported on current Bioconductor Windows build machines. if ( .Platform $ OS.type != \"windows\" ) { infile2 <- system.file ( \"extdata\" , \"test.fq.gz\" , package = \"qckitfastq\" ) ac_sorted <- adapter_content ( infile2 ) kable ( head ( ac_sorted )) %>% kable_styling () plot_adapter_content ( ac_sorted ) }","title":"Adapter content"},{"location":"vignette-qckitfastq/#references","text":"","title":"References"}]}